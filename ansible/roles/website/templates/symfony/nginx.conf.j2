{% if website.alternative_domain is defined %}
server {
    server_name{% for value in website.alternative_domain.items() %} {{ value }}{% endfor %};
    rewrite ^(.*) {{ protocol }}{{ website.domain }}$1 permanent;
}
{% endif %}

server {
    listen {{ redirect_port }}{% if ssl %} ssl{% endif %};

    server_name {{ website.domain }};
    rewrite ^(.*) {{ protocol }}{{ website.domain }}$1 permanent;
}

server {
{% if ssl %}
    listen {{ ssl_port }} ssl;

    keepalive_timeout   {{ website.ssl.timeout | default(70) }};
    ssl_certificate      {{ ssl_cert_file }};
    ssl_certificate_key  {{ ssl_key_file }};
    ssl_ciphers  HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers   on;
{% else %}
    listen {{ standard_port }};
{% endif %}

    server_name {{ website.domain }};

    set $version 'release';
    if ($http_x_version) {
        set $version $http_x_version;
    }

    root   /var/www/{{ website.domain }}/$version/{{ website_webdir }};

    # Logging
    access_log  /var/log/nginx/{% if env != 'prod' %}{{ website.domain }}.{% endif %}access.log;
    error_log  /var/log/nginx/{% if env != 'prod' %}{{ website.domain }}.{% endif %}error.log {% if env != 'prod' %}debug{% else %}warn{% endif %};

    # serve static files directly
    location ~* ^.+.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt)$ {
{% if env == 'prod' %}
        access_log        off;
        expires           max;
{% endif %}
    }

    location / {
{% if website.api is defined %}
        if ($request_method = OPTIONS ) {
            add_header Access-Control-Allow-Origin "{{ website.api.allow_origin | default('*') }}";
            add_header Access-Control-Allow-Methods "{{ website.api.allow_methods | default('POST, PUT, PATCH, GET, DELETE') }}";
            add_header Access-Control-Allow-Headers "origin, x-requested-with, content-type, accept, authorization";
            add_header Access-Control-Allow-Credentials "true";
            add_header Content-Length 0;
            add_header Content-Type text/plain;

            return 200;
        }
{% endif %}

        index {{ web_index }};
        try_files $uri @rewriteapp;
    }

    rewrite /{{ web_index }}?(.*)$ $1 permanent;

    location @rewriteapp {
        rewrite ^(.*)$ /{{ web_index }}$1 last;
    }

    # pass the PHP scripts to FastCGI server from upstream phpfcgi
    location ~ ^/(app|app_dev|config|index)\.php(/|$) {
        fastcgi_pass unix:/var/run/{{ website.domain }}.sock;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param  HTTPS off;
    }

{% if env != 'dev' %}
    location /(bundles|media) {
        access_log off;
        expires 30d;
 
        try_files $uri @rewriteapp;
    }
{% endif %}

    location ~ /\.  { 
        return 403; 
    }
}
